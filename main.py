#!/usr/bin/env python3
"""
Infrastructure Project Management Optimization

This script implements the optimization model for managing parallel infrastructure projects
with supplier selection as described in Model 1.docx.

Author: Generated by Claude AI
"""

from model1 import create_and_solve_model
from utils import (
    plot_gantt_chart, 
    plot_resource_usage, 
    plot_project_delays, 
    plot_supplier_allocation,
    plot_critical_path
)
import time
import os
import pandas as pd
import numpy as np

def main():
    """
    Main function to run the infrastructure project management model
    """
    print("=" * 80)
    print(" Infrastructure Project Management Optimization Model ".center(80, "="))
    print("=" * 80)
    
    # Create reports directory if it doesn't exist
    if not os.path.exists('reports'):
        os.makedirs('reports')
        print("Created 'reports' directory")
    
    # Time the solution process
    start_time = time.time()
    
    # Solve the model
    print("\nSolving the optimization model...")
    results = create_and_solve_model()
    
    solution_time = time.time() - start_time
    print(f"\nSolution time: {solution_time:.2f} seconds")
    
    # Print results summary
    print("\nResults Summary:")
    print(f"Status: {results.get('status', 'Unknown')}")
    
    if 'total_penalty' in results:
        print(f"Total Penalty Cost: {results['total_penalty']}")
        
        for j in range(results['raw_data']['NUM_project']):
            print(f"\nProject {j+1}:")
            print(f"  Target Date: {results['raw_data']['Target'][j]}")
            print(f"  Actual Completion: {results['completion_times'][j]}")
            print(f"  Delay: {results['delays'][j]} days")
            print(f"  Penalty: {results['penalties'][j]} NIS")
    
    # Generate visualizations
    print("\nGenerating visualizations...")
    try:
        plot_gantt_chart(results)
        plot_resource_usage(results)
        plot_project_delays(results)
        plot_supplier_allocation(results)
        plot_critical_path(results)
    except Exception as e:
        print(f"Warning: Could not generate some visualizations: {e}")
    
    # Generate detailed reports
    print("\nGenerating detailed reports...")
    try:
        generate_detailed_reports(results)
    except Exception as e:
        print(f"Warning: Could not generate some reports: {e}")
    
    print("\nModel execution completed.")
    print("\nOutput files:")
    print("  - Visualizations: gantt_chart.png, resource_usage.png, project_delays.png, supplier_allocation.png")
    print("  - Reports: reports/project_completion.csv, reports/activity_schedule.csv, etc.")

def generate_detailed_reports(results):
    """
    Generate detailed CSV reports from the optimization results
    """
    # Project completion report
    project_data = {
        'Project': [f'Project {j+1}' for j in range(results['raw_data']['NUM_project'])],
        'Target Date': [results['raw_data']['Target'][j] for j in range(results['raw_data']['NUM_project'])],
        'Completion Time': [results['completion_times'][j] for j in range(results['raw_data']['NUM_project'])],
        'Delay (days)': [results['delays'][j] for j in range(results['raw_data']['NUM_project'])],
        'Penalty (NIS)': [results['penalties'][j] for j in range(results['raw_data']['NUM_project'])]
    }
    project_df = pd.DataFrame(project_data)
    project_df.to_csv('reports/project_completion.csv', index=False)
    
    # Activity schedule report
    activities = []
    for i in range(results['raw_data']['NUM_act']):
        for j in range(results['raw_data']['NUM_project']):
            activities.append({
                'Project': f'Project {j+1}',
                'Activity': f'Activity {i+1}',
                'Start Time': results['start_times'][i][j],
                'Finish Time': results['finish_times'][i][j],
                'Duration': results['finish_times'][i][j] - results['start_times'][i][j]
            })
    
    activity_df = pd.DataFrame(activities)
    activity_df.to_csv('reports/activity_schedule.csv', index=False)
    
    # Material allocation report (simplified)
    material_allocations = []
    for k in range(results['raw_data']['NUM_raw_mat']):
        for j in range(results['raw_data']['NUM_project']):
            # Sum up allocations across all time periods for simplicity
            total_allocated = 0
            for time_idx in range(len(results['material_allocations'])):
                for s in range(results['raw_data']['NUM_sup']):
                    if time_idx < len(results['material_allocations']) and \
                       k < len(results['material_allocations'][time_idx]) and \
                       s < len(results['material_allocations'][time_idx][k]) and \
                       j < len(results['material_allocations'][time_idx][k][s]):
                        total_allocated += results['material_allocations'][time_idx][k][s][j]
            
            material_allocations.append({
                'Project': f'Project {j+1}',
                'Material': f'Material {k+1}',
                'Required': results['raw_data']['Quantity'][k][j],
                'Allocated': total_allocated
            })
    
    material_df = pd.DataFrame(material_allocations)
    material_df.to_csv('reports/material_allocation.csv', index=False)
    
    print(f"Reports saved to the 'reports' directory:")
    print(f"  - Project completion report: reports/project_completion.csv")
    print(f"  - Activity schedule report: reports/activity_schedule.csv")
    print(f"  - Material allocation report: reports/material_allocation.csv")

if __name__ == "__main__":
    main()
